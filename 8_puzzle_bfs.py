# -*- coding: utf-8 -*-
"""8_Puzzle_BFS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xrLIYuY2Wqiq7oGtxsnpgQnXgBPy9mea
"""

def bfs(curr,targ):
  q=[]
  vis=[]
  q.append(curr)
  while(len(q)>0):
    curr = q.pop(0)
    vis.append(curr)
    #print(curr)

    if (curr == targ):
      print("Success!! It is possible to solve 8 Puzzle problem")
      return

    poss_moves =[]
    poss_moves = possible_moves(curr,vis)

    for move in poss_moves:
      if move not in vis and move not in q:
        q.append(move)


def possible_moves(state, vis):
  b = state.index(0) #) indicates White space -> so b has index of it.
  d = [] #direction

  if b not in [0,1,2]:
    d.append('u')
  if b not in [6,7,8]:
    d.append('d')
  if b not in [0,3,6]:
    d.append('l')
  if b not in [2,5,8]:
    d.append('r')

  pos_moves = []
  for i in d:
    pos_moves.append(generate(state,i,b))
    print(generate(state,i,b))

  return [moves for moves in pos_moves if moves not in vis]


def generate(state,m,b):
  temp = state.copy()

  if m == 'd':
    temp[b+3],temp[b] = temp[b],temp[b+3]
  if m == 'u':
    temp[b-3],temp[b] = temp[b],temp[b-3]
  if m == 'l':
    temp[b-1],temp[b] = temp[b],temp[b-1]
  if m == 'r':
    temp[b+1],temp[b] = temp[b],temp[b+1]

  return temp


#calling BFS
initial = [1,2,3,0,4,6,7,5,8]
goal = [1,2,3,4,5,6,7,8,0]

bfs(initial,goal)